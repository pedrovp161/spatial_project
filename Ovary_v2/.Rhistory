class(pos_E)
# pos dos Exelent_responders
func_pose(pos_list = pos_list)
x=1
while (x>13) {
colnames(as.data.frame(pos_E[x])) = c("x","y")
x=x+1
}
View(pos_E)
View(pos_E[[1]])
# pos dos Exelent_responders
func_pose(pos_list = pos_list)
x=1
while (x>7) {
colnames(as.data.frame(pos_E[x])) = c("x","y")
x=x+1
}
View(pos_E)
View(pos_E[[1]])
colnames(as.data.frame(pos_E[1])) = c("x","y")
colnames(pos_E[1]) = c("x","y")
colnames(pos_E[1]) = c("x","y")
colnames(as.matrix(pos_E[1])) = c("x","y")
View(pos_E)
View(pos_E[[1]])
View(pos_E[[1]])
colnames(as.matrix(pos_E[[1]])) = c("x","y")
colnames(pos_E[[1]]) = c("x","y")
pos_E[[1]]
# pos dos Exelent_responders
func_pose(pos_list = pos_list)
x=1
while (x>7) {
colnames(pos_E[[x]]) = c("x","y")
x=x+1
}
View(pos_E)
View(pos_E[[1]])
View(pos_E[[4]])
View(pos_E[[2]])
x=1
View(pos_E)
View(pos_E[[1]])
while (x>=pos_E) {
colnames(pos_E[[x]]) = c("x","y")
x=x+1
}
while (x>7) {
colnames(pos_E[[x]]) = c("x","y")
x=x+1
}
pos_E[[1]]
class(pos_E[[1]])
# pos dos Exelent_responders
func_pose(pos_list = pos_list)
x=1
while (x<length(pos_E)) {
colnames(pos_E[[x]]) = c("x","y")
x=x+1
}
View(pos_E)
View(pos_E[[3]])
View(pos_E[[1]])
# plots
library(MERINGUE)
MERINGUE::plotEmbedding(pos_E[[5]], countmat_E[[5]])
head(countmat_E[[5]])
# plots
library(MERINGUE)
head(pos_E[[5]])
MERINGUE::plotEmbedding(pos_E[[5]], countmat_E[[5]])
MERINGUE::plotEmbedding(pos_E[[5]], col = colSums(countmat_E[[5]]))
head(colSums(countmat_E[[5]]))
View(pos.info)
row.names(pos_E[[1]])
head(row.names(pos_E[[1]]))
while (x<length(pos_E)) {
colnames(pos_E[[x]]) = c("x","y")
row.names(pos_E[[x]]) = pos.info[,1]
x=x+1
}
head(pos_E)
View(pos_E)
View(pos_E[[1]])
View(pos_E[[4]])
View(pos_E[[5]])
x=1
while (x<length(pos_E)) {
colnames(pos_E[[x]]) = c("x","y")
row.names(pos_E[[x]]) = pos.info[,1]
x=x+1
}
View(pos_E)
View(pos_E[[4]])
View(gene)
# POS
pos.info = read.csv("data/GEO1/spatial/tissue_positions_list.csv", header = FALSE)
View(pos.info)
# pos dos Exelent_responders
func_pose(pos_list = pos_list)
x=1
while (x<length(pos_E)) {
colnames(pos_E[[x]]) = c("x","y")
row.names(pos_E[[x]]) = pos.info[,1] # add barcodes
x=x+1
}
# pos dos Exelent_responders
func_pose(pos_list = pos_list)
func_pose = function(pos_list){
pos_1 = cbind(as.data.frame(pos_list[[1]]), as.data.frame(pos_list[[2]]))
pos_2 = cbind(as.data.frame(pos_list[[3]]), as.data.frame(pos_list[[4]]))
pos_3 = cbind(as.data.frame(pos_list[[5]]), as.data.frame(pos_list[[6]]))
pos_4 = cbind(as.data.frame(pos_list[[7]]), as.data.frame(pos_list[[8]]))
pos_5 = cbind(as.data.frame(pos_list[[9]]), as.data.frame(pos_list[[10]]))
pos_6 = cbind(as.data.frame(pos_list[[11]]), as.data.frame(pos_list[[12]]))
pos_E = list(pos_1,pos_2,pos_3,pos_4,pos_5, pos_6)
return(as.data.frame(pos_E))
}
# pos dos Exelent_responders
func_pose(pos_list = pos_list)
View(func_pose)
View(func_pose)
func_pose = function(pos_list){
pos_1 = cbind(as.data.frame(pos_list[[1]]), as.data.frame(pos_list[[2]]))
pos_2 = cbind(as.data.frame(pos_list[[3]]), as.data.frame(pos_list[[4]]))
pos_3 = cbind(as.data.frame(pos_list[[5]]), as.data.frame(pos_list[[6]]))
pos_4 = cbind(as.data.frame(pos_list[[7]]), as.data.frame(pos_list[[8]]))
pos_5 = cbind(as.data.frame(pos_list[[9]]), as.data.frame(pos_list[[10]]))
pos_6 = cbind(as.data.frame(pos_list[[11]]), as.data.frame(pos_list[[12]]))
pos_E = list(pos_1,pos_2,pos_3,pos_4,pos_5, pos_6)
return(as.data.frame(pos_E))
}
#pos
list = c("data/GEO1/spatial/tissue_positions_list.csv", "data/GEO2/spatial/tissue_positions_list.csv",
"data/GEO3/spatial/tissue_positions_list.csv", "data/GEO4/spatial/tissue_positions_list.csv",
"data/GEO5/spatial/tissue_positions_list.csv", "data/GEO6/spatial/tissue_positions_list.csv")
pos_list = list()
for (i in list) {
pos.info = read.csv(i, header = FALSE)
pos_list = append(pos_list, pos.info[,c(5,6)], after = 2)
}
# pos dos Exelent_responders
func_pose(pos_list = pos_list)
x=1
while (x<length(pos_E)) {
colnames(pos_E[[x]]) = c("x","y")
row.names(pos_E[[x]]) = pos.info[,1] # add barcodes
x=x+1
}
View(pos.info)
View(pos.info)
#pos
list = c("data/GEO1/spatial/tissue_positions_list.csv", "data/GEO2/spatial/tissue_positions_list.csv",
"data/GEO3/spatial/tissue_positions_list.csv", "data/GEO4/spatial/tissue_positions_list.csv",
"data/GEO5/spatial/tissue_positions_list.csv", "data/GEO6/spatial/tissue_positions_list.csv")
pos_list = list()
for (i in list) {
pos.info = read.csv(i, header = FALSE)
pos_list = append(pos_list, pos.info[,c(5,6)], after = 2)
}
View(pos.info)
# pos dos Exelent_responders
func_pose(pos_list = pos_list)
func_pose = function(pos_list){
pos_1 = cbind(as.data.frame(pos_list[[1]]), as.data.frame(pos_list[[2]]))
pos_2 = cbind(as.data.frame(pos_list[[3]]), as.data.frame(pos_list[[4]]))
pos_3 = cbind(as.data.frame(pos_list[[5]]), as.data.frame(pos_list[[6]]))
pos_4 = cbind(as.data.frame(pos_list[[7]]), as.data.frame(pos_list[[8]]))
pos_5 = cbind(as.data.frame(pos_list[[9]]), as.data.frame(pos_list[[10]]))
pos_6 = cbind(as.data.frame(pos_list[[11]]), as.data.frame(pos_list[[12]]))
pos_E = list(pos_1,pos_2,pos_3,pos_4,pos_5, pos_6)
return(as.data.frame(pos_E))
}
# pos dos Exelent_responders
func_pose(pos_list = pos_list)
pos_1 = cbind(as.data.frame(pos_list[[1]]), as.data.frame(pos_list[[2]]))
pos_2 = cbind(as.data.frame(pos_list[[3]]), as.data.frame(pos_list[[4]]))
pos_3 = cbind(as.data.frame(pos_list[[5]]), as.data.frame(pos_list[[6]]))
pos_4 = cbind(as.data.frame(pos_list[[7]]), as.data.frame(pos_list[[8]]))
pos_5 = cbind(as.data.frame(pos_list[[9]]), as.data.frame(pos_list[[10]]))
pos_6 = cbind(as.data.frame(pos_list[[11]]), as.data.frame(pos_list[[12]]))
pos_E = list(pos_1,pos_2,pos_3,pos_4,pos_5, pos_6)
x=1
while (x<length(pos_E)) {
colnames(pos_E[[x]]) = c("x","y")
row.names(pos_E[[x]]) = pos.info[,1] # add barcodes
x=x+1
}
View(pos_E)
View(pos_E[[3]])
View(pos_E[[6]])
View(pos_E[[6]])
View(pos_E[[1]])
View(pos_E[[1]])
View(pos_E[[2]])
View(pos_E[[2]])
View(pos_E[[3]])
View(pos_E[[4]])
View(pos_E[[5]])
View(pos_E[[6]])
gene = read.csv("data/GEO1/raw_feature_bc_matrix/features.tsv.gz", header = FALSE, sep="\t")
dim(gene)
# POS
pos.info = read.csv("data/GEO1/spatial/tissue_positions_list.csv", header = FALSE)
head(pos.info)
pos = pos.info[,c("V6", "V5")]
dim(pos)
list = c("data/GEO1/raw_feature_bc_matrix/barcodes.tsv.gz", "data/GEO2/raw_feature_bc_matrix/barcodes.tsv.gz",
"data/GEO3/raw_feature_bc_matrix/barcodes.tsv.gz", "data/GEO4/raw_feature_bc_matrix/barcodes.tsv.gz",
"data/GEO5/raw_feature_bc_matrix/barcodes.tsv.gz", "data/GEO6/raw_feature_bc_matrix/barcodes.tsv.gz")
barcode_list = list()
b=0
for (i in list) {
b=b+1
barcode = read.csv(i, header = FALSE)
barcode_list[b] = barcode
}
View(barcode_list)
barcode_list[1]
barcode_list[2]
barcode_list[3]
while (x<=length(pos_E)) {
colnames(pos_E[[x]]) = c("x","y")
row.names(pos_E[[x]]) = barcode_list[x] # add barcodes
x=x+1
}
dim(pos_E[[1]])
dim(barcode_list[1])
dim(barcode_list[[1]])
View(barcode_list)
barcode_list[[1]]
barcode_list[,1]
as.data.frame(barcode_list[,1])
as.data.frame(barcode_list[[1]])
while (x<=length(pos_E)) {
colnames(pos_E[[x]]) = c("x","y")
row.names(pos_E[[x]]) = as.data.frame(barcode_list[,x]) # add barcodes
x=x+1
}
as.data.frame(barcode_list[[1]][,1])
as.data.frame(barcode_list[[1]])
dim(as.data.frame(barcode_list[[1]]))
while (x<=length(pos_E)) {
colnames(pos_E[[x]]) = c("x","y")
row.names(pos_E[[x]]) = as.data.frame(barcode_list[x]) # add barcodes
x=x+1
}
dim(pos_E[[1]])
View(pos_1)
# POS
pos.info = read.csv("data/GEO1/spatial/tissue_positions_list.csv", header = FALSE)
head(pos.info)
pos = pos.info[,c("V6", "V5")]
dim(pos)
row.names(pos) = pos.info[,1]
head(pos)
View(barcode_list)
dim(barcode_list[[1]])
dim(as.data.frame(barcode_list[[1]]))
View(barcode)
pos_E[[1]]
pos_E[[1]][1,]
pos_E[[1]][,1]
pos_E[[1]][1,]
class(pos.info[[1]])
pos.info
dim(pos_list[[1]])
head(pos_list[[1]])
head(pos_list[[1]][,1])
as.data.frame(pos_list[[1]])
as.data.frame(pos_list[1])
View(pos_list)
View(pos_E)
View(pos_E[[1]])
source("C:/Users/pedro/OneDrive/Área de Trabalho/Spatial_Ovary/merged.R", echo=TRUE)
# pos dos Exelent_responders
pos_1 = cbind(as.data.frame(pos_list[[1]]), as.data.frame(pos_list[[2]]))
pos_2 = cbind(as.data.frame(pos_list[[3]]), as.data.frame(pos_list[[4]]))
pos_3 = cbind(as.data.frame(pos_list[[5]]), as.data.frame(pos_list[[6]]))
pos_4 = cbind(as.data.frame(pos_list[[7]]), as.data.frame(pos_list[[8]]))
pos_5 = cbind(as.data.frame(pos_list[[9]]), as.data.frame(pos_list[[10]]))
pos_6 = cbind(as.data.frame(pos_list[[11]]), as.data.frame(pos_list[[12]]))
pos_E = list(pos_1,pos_2,pos_3,pos_4,pos_5, pos_6)
x=1
while (x<=length(pos_E)) {
colnames(pos_E[[x]]) = c("x","y")
#row.names(pos_E[[x]]) = as.data.frame(pos_list[x]) # add barcodes
x=x+1
}
View(pos_E)
View(pos_E[[1]])
View(pos_E)
View(pos_E[[6]])
head(as.data.frame(pos_list[1])
afmdaskfm
head(as.data.frame(pos_list[1])
dasdas
head(as.data.frame(pos_list[1]))
pos_barcodes = pos.info[,1]
pos_barcodes = as.data.frame(pos.info[,1])
View(pos_barcodes)
for (i in list) {
pos.info = read.csv(i, header = FALSE)
pos_list = append(pos_list, pos.info[,c(5,6)], after = 2)
pos_barcodes = as.data.frame(pos.info[,1])
}
for (i in list) {
pos.info = read.csv(i, header = FALSE)
pos_list = append(pos_list, pos.info[,c(5,6)], after = 2)
pos_barcodes = append(pos_barcodes, as.data.frame(pos.info[,1]))
}
View(pos_barcodes)
pos_barcodes = 0
for (i in list) {
pos.info = read.csv(i, header = FALSE)
pos_list = append(pos_list, pos.info[,c(5,6)], after = 2)
pos_barcodes = append(pos_barcodes, as.data.frame(pos.info[,1]))
}
View(pos_barcodes)
pos_barcodes[[2:7]]
pos_barcodes[[1]] = NULL
View(pos_barcodes)
while (x<=length(pos_E)) {
colnames(pos_E[[x]]) = c("x","y")
row.names(pos_E[[1]]) = barcode # add barcodes
x=x+1
}
View(pos_E)
View(pos_E[[3]])
View(pos_E[[1]])
View(pos_E)
View(pos_E[[3]])
View(pos_E[[6]])
View(pos_E)
View(pos_E[[1]])
View(barcode_list)
barcode_list[[1]]
dim(barcode_list[[1]])
dim(as.data.frame(barcode_list[[1]]))
pos_barcodes[[1]]
dim(as.data.frame(barcode_list[[1]][,1]))
dim(as.data.frame(barcode_list[,1]))
barcode = as.data.frame(pos_barcodes[[1]])
barcode[,1]
head(barcode[,1])
head(barcode[1,])
while (x<=length(pos_E)) {
colnames(pos_E[[x]]) = c("x","y")
row.names(pos_E[[x]]) = barcode[,1] # add barcodes
x=x+1
}
View(pos_E)
View(pos_E[[4]])
View(pos_E[[1]])
pos_E[[2]]]
pos_E[[5]]
View(pos_E[[1]])
head(row.names(pos_E[[x]]))
head(row.names(pos_E[[1]]))
row.names(pos_E[[1]]) = barcode[,1] # add barcodes
View(pos_E)
View(pos_E[[1]])
pos_barcodes[1] %in% pos_barcodes[2]
head(barcode)
row.names(pos_E[[2]]) = barcode[,1] # add barcodes
View(pos_E)
View(pos_E[[2]])
while (x<=length(pos_E)) {
colnames(pos_E[[x]]) = c("x","y")
row.names(pos_E[[x]]) = barcode[,1] # add barcodes
x=x+1
}
View(pos_E)
View(pos_E[[4]])
x=1
while (x<=length(pos_E)) {
colnames(pos_E[[x]]) = c("x","y")
row.names(pos_E[[x]]) = barcode[,1] # add barcodes
x=x+1
}
View(pos_E)
View(pos_E[[6]])
for (i in pos_E) {
}
for (i in pos_E) {
plot(i, pch = 16)
}
head(pos_E[[1]][colnames(countmat),])
head(pos_E[[1]][colnames(countmat_E[[1]]),])
dim(pos_E[[1]][colnames(countmat_E[[1]]),])
while (x<=length(pos_E)) {
colnames(pos_E[[x]]) = c("x","y")
row.names(pos_E[[x]]) = barcode[,1] # add barcodes
pos_E[[x]] = pos_E[[x]][colnames(countmat_E[[x]]),]
x=x+1
}
plot(pos_E[[1]])
plot(pos_E[[2]])
plot(pos_E[[3]])
plot(pos_E[[4]])
plot(pos_E[[5]])
plot(pos_E[[6]])
# POS
pos.info = read.csv("data/GEO1/spatial/tissue_positions_list.csv", header = FALSE)
head(pos.info)
pos = pos.info[,c("V6", "V5")]
dim(pos)
row.names(pos) = pos.info[,1]
head(pos)
plot(pos, pch = 16)
# fix order position
dim(pos)
pos = pos[colnames(countmat),]
countmat = Matrix::readMM("data/GEO1/raw_feature_bc_matrix/matrix.mtx.gz")
dim(countmat)
head(countmat)
barcode = read.csv("data/GEO1/raw_feature_bc_matrix/barcodes.tsv.gz", header = FALSE)
View(barcode)
dim(barcode)
gene = read.csv("data/GEO1/raw_feature_bc_matrix/features.tsv.gz", header = FALSE, sep="\t")
gene = read.csv("data/GEO1/raw_feature_bc_matrix/features.tsv.gz", header = FALSE, sep="\t")
dim(gene)
head(gene)
# COUNTMAT
colnames(countmat) <- barcode[,1]
rownames(countmat) <- make.unique(gene[,2])
head(countmat)
# POS
pos.info = read.csv("data/GEO1/spatial/tissue_positions_list.csv", header = FALSE)
head(pos.info)
pos = pos.info[,c("V6", "V5")]
dim(pos)
row.names(pos) = pos.info[,1]
head(pos)
plot(pos, pch = 16)
# fix order position
dim(pos)
pos = pos[colnames(countmat),]
head(pos)
head(pos_E[[1]])
dim(pos_E[[1]])
dim(pos)
pos_E[[1]] = pos_E[[1]][colnames(countmat_E[[1]]),]
dim(pos_E[[1]])
plot(pos_E[[1]])
#results
save(pos_E, countmat_E)
#results
save(pos_E, countmat_E, file = "results")
#results
save(pos_E, countmat_E, file = "results/mergeddata")
library(BiocManager)
library(SpotClean)
library(STdeconvolve)
library(BiocManager)
library(SpotClean)
library(STdeconvolve)
movary_raw <- read10xRaw("data/raw_feature_bc_matrix/")
getwd()
source("C:/Users/pedro/OneDrive/Área de Trabalho/Spatial_Ovary/merged.R", echo=TRUE)
MERINGUE::plotEmbedding(pos_E[[1]], col = colSums(countmat_E[[1]]))
MERINGUE::plotEmbedding(pos_E[[2]], col = colSums(countmat_E[[2]]))
MERINGUE::plotEmbedding(pos_E[[3]], col = colSums(countmat_E[[3]]))
MERINGUE::plotEmbedding(pos_E[[4]], col = colSums(countmat_E[[4]]))
MERINGUE::plotEmbedding(pos_E[[5]], col = colSums(countmat_E[[5]]))
MERINGUE::plotEmbedding(pos_E[[6]], col = colSums(countmat_E[[6]]))
MERINGUE::plotEmbedding(pos_E[[1]], col = colSums(countmat_E[[1]]))
MERINGUE::plotEmbedding(pos_E[[2]], col = colSums(countmat_E[[2]]))
getwd()
plot(pos_E[[1]])
MERINGUE::plotEmbedding(pos_E[[2]], col = colSums(countmat_E[[2]]))
plot(pos_E[[2]])
MERINGUE::plotEmbedding(pos_E[[2]], col = colSums(countmat_E[[2]]))
g = "FOLR2"
g = "FOLR2"
gen = countmat_E[[2]][g,]
head(gen)
MERINGUE::plotEmbedding(pos_E[[2]], col = gen))
MERINGUE::plotEmbedding(pos_E[[2]], col = gen)
plot(pos_E[[5]])
plot(pos_E[[6]])
plot(pos_E[[2]])
plot(pos_E[[3]])
plot(pos_E[[6]])
MERINGUE::plotEmbedding(pos_E[[6]], col = colSums(countmat_E[[6]]))
plot(pos_E[[6]])
MERINGUE::plotEmbedding(pos_E[[6]], col = gen)
dim(gene)
dim(gen)
dim(as.data.frame(gen))
dim(pos_E[[6]])
g = "FOLR2"
gen = countmat_E[[6]][g,]
MERINGUE::plotEmbedding(pos_E[[6]], col = gen)
dev.off()
g = "FOLR2"
gen = countmat_E[[6]][g,]
MERINGUE::plotEmbedding(pos_E[[6]], col = gen)
plot(pos_E[[6]])
plot(pos_E[[4]])
gen = countmat_E[[4]][g,]
MERINGUE::plotEmbedding(pos_E[[4]], col = gen)
plot(pos_E[[5]])
g = "FOLR2"
gen = countmat_E[[5]][g,]
MERINGUE::plotEmbedding(pos_E[[5]], col = gen)
MERINGUE::plotEmbedding(pos_E[[5]], col = colSums(countmat_E[[5]]))
setwd("C:/Users/pedro/OneDrive/Área de Trabalho/spatial")
library(BiocManager)
library(SpotClean)
library(STdeconvolve)
library(Matrix)
